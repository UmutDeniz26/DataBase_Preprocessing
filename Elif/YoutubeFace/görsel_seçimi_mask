import cv2
import dlib
import os
import numpy as np

# Dlib yüz dedektörünü yükleyin
face_detector = dlib.get_frontal_face_detector()

# Dlib yüz noktaları tahmincisi
landmark_predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat.bz2")  # Eğitilmiş model dosyasının yolu

# Klasör yolu
folder_path = "aligned_images_DB/Aaron_Eckhart/0"

# Klasördeki tüm dosyaları al
image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

for image_file in image_files:
    # Görüntüyü yükleyin
    image_path = os.path.join(folder_path, image_file)
    image = cv2.imread(image_path)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Yüzleri tespit et
    faces = face_detector(gray_image)

    # En küçük dönüş açısına sahip yüzü bul
    min_angle = float('inf')
    min_angle_face = None

    for face in faces:
        landmarks = landmark_predictor(gray_image, face)
        left_eye = (landmarks.part(36).x, landmarks.part(36).y)
        right_eye = (landmarks.part(45).x, landmarks.part(45).y)

        # Dönüş açısını hesapla
        angle = -cv2.phase(np.array(right_eye) - np.array(left_eye))

        # En küçük dönüş açısını kontrol et
        if angle < min_angle:
            min_angle = angle
            min_angle_face = face

    # En küçük dönüş açısına sahip yüzü çiz
    if min_angle_face is not None:
        x, y, w, h = min_angle_face.left(), min_angle_face.top(), min_angle_face.width(), min_angle_face.height()
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Sonuç görüntüsünü göster
        cv2.imshow("Min Angle Face", image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    else:
        print(f"Yüz bulunamadı: {image_file}")
