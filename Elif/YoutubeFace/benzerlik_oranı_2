import os
import cv2
from skimage.metrics import structural_similarity as ssim

def benzerlik_orani_hesapla(img1, img2):
    benzerlik_orani, _ = ssim( img1, img2, full=True)
    return benzerlik_orani

def klasor_benzerlik_kontrolu(klasor_yolu, file):
    gorsel_yollar = [os.path.join(klasor_yolu, gorsel) for gorsel in os.listdir(klasor_yolu) if gorsel.endswith(('.jpg', '.jpeg', '.png'))]
    i = 0
    highScoreCnt = 0
    
    while i < len(gorsel_yollar)-1:
        gorsel1 = cv2.imread(gorsel_yollar[i], cv2.IMREAD_GRAYSCALE)
        gorsel2 = cv2.imread(gorsel_yollar[i+1], cv2.IMREAD_GRAYSCALE)

        gorsel1 = cv2.resize(gorsel1, (400, 400))
        gorsel2 = cv2.resize(gorsel2, (400, 400))

        benzerlik12 = benzerlik_orani_hesapla(gorsel1, gorsel2)
        
        i+=1
        #file.write(f"File Name: {gorsel_yollar[i]}   Score: {benzerlik12}\n")
            
        percentage = highScoreCnt / len(gorsel_yollar)
        
        if benzerlik12 >= 0.9:
            highScoreCnt+=1
            
            file.write( f"File Name: {gorsel_yollar[i]}    High score nums: {highScoreCnt}    Total length: {len(gorsel_yollar)}      Percentage:  {percentage}\n\n")

def main():
        # Veri setinin bulunduğu dizin
        dataset_path = './Elif/YoutubeFace/aligned_images_DB2'
        output_file = './Elif/YoutubeFace/benzerlik_oranları.txt'
        
        with open(output_file, 'w') as file:
            file.write("Benzerlik Oranlari\n\n")

            for person_name in os.listdir(dataset_path):
                person_path = os.path.join(dataset_path, person_name)
                if os.path.isdir(person_path):
                    for subfolder_name in os.listdir(person_path):
                        subfolder_path = os.path.join(person_path, subfolder_name)
                        print(subfolder_path)
                        if os.path.isdir(subfolder_path):
                            klasor_benzerlik_kontrolu(subfolder_path, file)

if __name__ == "__main__":
    main()
